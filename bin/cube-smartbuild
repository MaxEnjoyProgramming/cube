#!/usr/bin/env node

const fs = require('xfs');
const path = require('path');
const cmd = require('commander');

cmd
  .description('build the hole project')
  .option('-p, --processors [value]', 'loading plugin processors, like `cube-coffee,cube-jsx`')
  .option('-o, --output [value]', 'set the output path')
  .option('-b, --base [value]', 'set the cube base')
  .option('-r, --resbase [value]', 'the http base for resouce')
  .option('--remote [value]', 'set the namespace for remote call')
  .option('--auto-merge', 'if switch on auto-merge deps')
  .option('--without-compress', 'do not compress code, output the source with wrap')
  .action(function (source, args) {
    if (!args || !source) {
      return this.help();
    }
    if (args.processors) {
      args.processors = args.processors.split(',');
      args.processors.forEach(function (v, i, a) {
        a[i] = v.trim();
      });
    }

    var cwd = getCwd();
    var fstat;
    var inputPath, outputPath, cube, tool, root;
    var compress = args.withoutCompress ? false : true;

    root = args.base ? args.base : '';
    if (root) {
      root = isAbsPath(root) ? root : path.join(cwd, root);
    }
    source = isAbsPath(source) ? source : path.join(cwd, source);
    inputPath = source;
    try {
      fstat = fs.statSync(source);
    } catch (e) {
      console.log('source not fould', e);
      this.help();
      return;
    }

    if (fstat.isFile()) {
      outputPath = args.output ? (isAbsPath(args.output) ? args.output : path.join(cwd, args.output)) : source.replace(/\.(\w+)$/, '.min.$1');
      root = (root ? root : path.dirname(source)).replace(/(\/|\\)$/, '');
      cube = new Cube({
        release: true,
        root: root,
        compress: compress,
        middleware: false,
        processors: args.processors,
        resBase: args.resbase,
        remote: args.remote
      });
      tool = Cube.getTool();
      tool.processFile(cube, source, outputPath, {withSource: args.withSource}, buildOutput);
    } else if (fstat.isDirectory()) {
      outputPath = args.output ? (isAbsPath(args.output) ? args.output : path.join(cwd, args.output)) : (source.replace(/(\/|\\)$/, '') + '.release');
      root = (root ? root : source).replace(/(\/|\\)$/, '');
      cube = new Cube({
        release: true,
        root: root,
        compress: compress,
        middleware: false,
        processors: args.processors,
        resBase: args.resbase,
        remote: args.remote
      });
      tool = Cube.getTool();
      tool.processDir(cube, inputPath, outputPath, {withSource: args['with-source']}, buildOutput);
    } else {
      console.log('unknow type input source', source);
    }
  });