#!/usr/bin/env node

const fs = require('xfs');
const path = require('path');
const cmd = require('commander');
const Cube = require('../index');

function getCwd() {
  return process.cwd();
}
function isAbsPath(p) {
  if (process.platform.indexOf('win') === 0) {
    return /^\w:/.test(p);
  } else {
    return /^\//.test(p);
  }
}
function buildOutput(err, info) {
  console.log('==================');
  if (!err) {
    err = [];
  }
  if (!Array.isArray(err)) {
    err = [err];
  }
  if (err && err.length) {
    err.forEach(function (e) {
      console.log(
        ' *',
        'File:', e.file,
        'Line:', e.line,
        'Column:', e.column,
        'Code:', e.code,
        'Message:', e.message
      );
    });
  } else {
    console.log('Build successfully');
  }
  console.log('==================');
  console.log(err.length ? 'Build Finished, Total Errors: ' + err.length :  ' Build Successfully');
  console.log('Files:', info.total, 'Cost:', info.time + 's');
  console.log('==================');
}

cmd
  .usage('$your_code_dir')
  .description('build the hole project, including: less->css->min, script->wraped->min')
  .option('-p, --processors [value]', 'loading plugin processors, like `cube-coffee,cube-jsx`')
  .option('-o, --output [value]', 'set the output dir')
  .option('-b, --base [value]', 'set the cube base')
  .option('-r, --resbase [value]', 'the http base for resouce')
  .option('--merge', 'if merged dependences into a file')
  .option('--mangle-file-name', 'mangle the file name into random name')
  .option('--without-compress', 'do not compress code')
  .parse(process.argv);

var source = cmd.args[0];
var args = cmd;

if (!args || !source) {
  this.help();
  return;
}
if (args.processors) {
  args.processors = args.processors.split(',');
  args.processors.forEach(function (v, i, a) {
    a[i] = v.trim();
  });
}



var cwd = getCwd();
var fstat;
var inputPath, outputPath, cube, tool, root;
var compress = args.withoutCompress ? false : true;

root = args.base ? args.base : '';
if (root) {
  root = isAbsPath(root) ? root : path.join(cwd, root);
}
source = isAbsPath(source) ? source : path.join(cwd, source);
inputPath = source;
try {
  fstat = fs.statSync(source);
} catch (e) {
  console.log('source not fould', e);
  this.help();
  return;
}

if (fstat.isFile()) {
  outputPath = args.output ? (isAbsPath(args.output) ? args.output : path.join(cwd, args.output)) : source.replace(/\.(\w+)$/, '.min.$1');
  root = (root ? root : path.dirname(source)).replace(/(\/|\\)$/, '');
  cube = new Cube({
    release: true,
    root: root,
    compress: compress,
    middleware: false,
    processors: args.processors,
    mangleFileName: args.mangleFileName,
    withoutWrap: true
  });
  tool = Cube.getTool();
  tool.processFile(cube, {src:source, dest:outputPath}, buildOutput);
} else if (fstat.isDirectory()) {
  outputPath = args.output ? (isAbsPath(args.output) ? args.output : path.join(cwd, args.output)) : (source.replace(/(\/|\\)$/, '') + '.release');
  root = (root ? root : source).replace(/(\/|\\)$/, '');
  cube = new Cube({
    release: true,
    root: root,
    compress: compress,
    middleware: false,
    processors: args.processors,
    mangleFileName: args.mangleFileName,
    withoutWrap: true
  });
  tool = Cube.getTool();
  tool.processDir(cube, {src: inputPath, dest:outputPath}, buildOutput);
} else {
  console.log('unknow type input source', source);
}