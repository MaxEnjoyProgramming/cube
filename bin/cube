#!/usr/bin/env node
var debug = require('debug')('cube:cli');
var cmd = require('commander');
var Cube = require('../index');
var fs = require('xfs');
var path = require('path');
var pkg = require(path.join(__dirname, '../package'));

function getCwd() {
  return process.cwd();
}
/** find cube.js **/
function findCube(cb) {
  var base = getCwd();
  debug('find cube file: %s', base);
  var tar = [];
  fs.walk(base, function (err, file) {
    if (/(\/node_modules\/|\/\.git)/.test(file)) {
      return ;
    }
    var filename = path.basename(file);
    if (/^cube\.(min\.)?js$/.test(filename)) {
      tar.push(file);
    }
  }, function () {
    if (tar.length > 1) {
      console.log('[ERROR] more then one cube founded!', tar);
      return cb(null);
    } else if (!tar.length) {
      console.log('[]ERROR] cube not found');
      return cb(null);
    }
    cb(tar[0]);
  });
}

function optmizeInfo() {
  console.log('[INFO] you can custom cube.min.js file, i.e : css_runtime');
}
function filePath(file) {
  var base = getCwd();
  return path.join(base, file);
}
function checkFile(file) {
  return fs.existsSync(filePath(file));
}
function sourcePath(file) {
  var base = __dirname;
  return path.join(base, '../', file);
}

function buildOutput(err, info) {
  console.log('==================');
  console.log('Files:', info.total, 'Cost:', info.time + 's');
  if (err.length) {
    console.log('Error:', err.length);
    err.forEach(function (e) {
      console.log('\t*', e.code, e.message);
    });
  } else {
    console.log('Build successfully');
  }
  console.log('==================');
}

cmd.version('v' + pkg.version);

function run() {
  var argv = Array.prototype.slice.call(arguments);
  var args = argv.pop();
  var params = argv;
  Cube.init({
    root: path.join(process.cwd(), params[0] || ''),
    port: cmd.port ? cmd.port : 9999,
    router: args.vpath || '/',
    middleware: false
  });
}

cmd.command('run')
  .description('start server, @deprecate, using `cube start`')
  .option('-b, --base [value]', 'the http virtual base, i.e `http://static.taobao.com/res/js/`, base -> `/res/js/`')
  .option('-p, --port [value]', 'server port')
  .option('-o, --output [value]', 'output dir')
  .action(run);
cmd.command('start')
  .description('start server')
  .option('-b, --base [value]', 'the http virtual base, i.e `http://static.taobao.com/res/js/`, base -> `/res/js/`')
  .option('-p, --port [value]', 'server port')
  .option('-o, --output [value]', 'output dir')
  .action(run);

cmd.command('init')
  .alias('install')
  .description('init project')
  .option('--jade', 'with jade runtime')
  .option('--ejs', 'with ejs runtime')
  .option('--css', 'with dynamic css load support')
  .option('-f, --force', 'force update cube.min.js')
  .action(function (option) {
    // TODO init project
    // copy cube.js
    if (!checkFile('./cube.min.js') || option.force) {
      var code_cube = fs.readFileSync(sourcePath('./runtime/cube.min.js')).toString();
      if (option.css) {
        console.log('enable mcss');
        code_cube += '\n//cube_css.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube_css.min.js'));
        optmizeInfo();
      }
      fs.sync().save(filePath('./cube.min.js'), code_cube);

      if (option.jade) {
        console.log('enable jade');
        code_cube = '\n//jade_runtime\n' + fs.readFileSync(sourcePath('./runtime/jade_runtime.min.js'));
        fs.sync().save(filePath('./node_modules/jade_runtime.js'), code_cube);
      }
      if (option.ejs) {
        console.log('enable ejs');
        code_cube = '\n//ejs_runtime\n' + fs.readFileSync(sourcePath('./runtime/ejs_runtime.min.js'));
        fs.sync().save(filePath('./node_modules/ejs_runtime.js'), code_cube);
      }
      console.log('inited cube.min.js');
    } else {
      console.log('file already exist: ./cube.min.js');
    }
    if (!checkFile('./index.html')) {
      fs.sync().save(filePath('./index.html'), fs.readFileSync(sourcePath('./runtime/start.html')));
      console.log('inited index.html');
    } else {
      console.log('file already exist: ./index.html');
    }
    if (!checkFile('./cube.json')) {
      fs.sync().save(filePath('./cube.json'), fs.readFileSync(sourcePath('./runtime/cube.json')));
      console.log('inited cube.json');
    } else {
      console.log('file already exist: ./cube.json');
    }
    if (!checkFile('./main.js')) {
      fs.sync().save(filePath('./main.js'),
        'document.getElementById("msg").innerHTML = "hello, Cube";\n' +
        'document.getElementById("show").value = document.getElementById("initscript").innerHTML;\n' +
        'exports.run = function () {console.log("app started!")};'
      );
      console.log('inited main.js');
    } else {
      console.log('file already exist: ./main.js');
    }
    fs.sync().mkdir('test');

    console.log('successfully inited');
  });

cmd.command('install')
  .description('install dependences')
  .action(function () {
    this.parent.emit('init');
  });

cmd.command('update')
  .description('update cube.min.js')
  .option('--min', 'simple cube.min.js, no other run_time inculde')
  .action(function(option) {
    findCube(function(cubeFile) {
      if (!cubeFile) {
        return;
      }
      var code_cube = '//cube.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube.min.js')).toString();
      if (!option.min) {
        console.log('enabled jade');
        code_cube += '\n//jade_runtime\n' + fs.readFileSync(sourcePath('./runtime/jade_runtime.min.js'));
        console.log('enabled ejs');
        code_cube += '\n//ejs_runtime\n' + fs.readFileSync(sourcePath('./runtime/ejs_runtime.min.js'));
        console.log('enabled mcss');
        code_cube += '\n//cube_css.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube_css.min.js'));
        optmizeInfo();
      }
      fs.sync().save(cubeFile, code_cube);
      console.log(cubeFile, 'updated');
    });
  });

cmd.command('build')
  .usage('-p processor1,processor2 your_code_dir')
  .description('build the hole project, including: less->css->min, script->wraped->min')
  .option('-p, --processors [value]', 'build in modules, tell cube ignore them')
  .option('-o, --output [value]', 'set the output path')
  .option('-b, --base [value]', 'set the cube base')
  .option('--with-source', 'create source file')
  .option('--merge', 'if merged dependences into on file')
  .action(function (source, args) {
    if (!args) {
      this.help();
      return;
    }
    if (args.processors) {
      args.processors = args.processors.split(',');
      args.processors.forEach(function (v, i, a) {
        a[i] = v.trim();
      });
    }

    var cwd = getCwd();
    var fstat;
    source = path.join(cwd, source);
    console.log(source);
    try {
      fstat = fs.statSync(source);
    } catch (e) {
      console.log('source not fould', e);
      this.help();
      return;
    }
    var inputPath, outputPath, cube, tool, root;
    if (fstat.isFile()) {
      inputPath = source;
      outputPath = args.output ? (args.output.indexOf('/') === 0 ? args.output : path.join(cwd, args.output)) : source.replace(/\.(\w+)$/, '.min.$1');
      console.log('>>', outputPath);
      root = args.base ? args.base : path.dirname(inputPath);
      cube = new Cube({
        release: true,
        root: root,
        middleware: false,
        processors: args.processors,
      });
      tool = Cube.getTool();
      tool.processFile(cube, inputPath, outputPath, {withSource: args['with-source']}, buildOutput);
    } else if (fstat.isDirectory()) {
      inputPath = source;
      outputPath = args.output ? (args.output.indexOf('/') === 0 ? args.output : path.join(cwd, args.output)) : (source + '.release');
      root = args.base ? args.base : inputPath;
      cube = new Cube({
        release: true,
        root: root,
        middleware: false,
        processors: args.processors,
      });
      tool = Cube.getTool();
      tool.processDir(cube, inputPath, outputPath, {withSource: args['with-source']}, buildOutput);
    } else {
      console.log('unknow type input source', source);
    }
  });

cmd.command('help')
  .description('help')
  .action(function () {
    cmd.help();
  });

cmd.parse(process.argv);

if (!cmd.args.length) {
  cmd.help();
}



