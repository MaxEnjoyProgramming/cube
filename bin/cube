#!/usr/bin/env node
var cmd = require('commander');
var Cube = require('../index');
var fs = require('xfs');
var path = require('path');
var pkg = require(path.join(__dirname, '../package'));

function getBase() {
  return process.cwd();
}
/** find cube.js **/
function findCube(cb) {
  var tar = [];
  fs.walk(getBase(), function (err, file) {
    var filename = path.basename(file);
    if (/^cube\.(min\.)?js$/.test(filename)) {
      tar.push(file);
    }
  }, function () {
    if (tar.length > 1) {
      console.log('[ERROR] more then one cube founded!', tar);
      return cb(null);
    }
    cb(tar[0]);
  });
}
function filePath(file) {
  var base = getBase();
  return path.join(base, file);
}
function checkFile(file) {
  return fs.existsSync(filePath(file));
}
function sourcePath(file) {
  var base = __dirname;
  return path.join(base, '../', file);
}

cmd.version('v' + pkg.version);

function run() {
  var argv = Array.prototype.slice.call(arguments);
  var args = argv.pop();
  var params = argv;
  Cube.init({
    root: path.join(process.cwd(), params[0] || ''),
    port: cmd.port ? cmd.port : 9999,
    router: args.vpath || '/',
    middleware: false
  });
}

cmd.command('run')
  .description('start server, @deprecate, using `cube start`')
  .option('--vpath [value]', 'the http virtual path, i.e `http://static.taobao.com/res/js/`, vpath -> `/res/js/`')
  .option('-p, --port [value]', 'server port')
  .option('-o, --output [value]', 'output dir')
  .action(run);
cmd.command('start')
  .description('start server')
  .option('-b --base [value]', 'the http virtual base, i.e `http://static.taobao.com/res/js/`, vpath -> `/res/js/`')
  .option('-p, --port [value]', 'server port')
  .option('-o, --output [value]', 'output dir')
  .action(run);

cmd.command('init')
  .description('init project')
  .option('--jade', 'enable jade, inject jade_runtime to cube.js')
  .option('--ejs', 'enable ejs, inject ejs_runtime to cube.js')
  .option('--mcss', 'enable modulize css, inject cube_css to cube.js')
  .action(function (option) {
    // TODO init project
    // copy cube.js
    if (!checkFile('./cube.min.js')) {
      var code_cube = '//cube.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube.min.js')).toString();
      if (option.jade) {
        console.log('enable jade');
        code_cube += '\n//jade_runtime\n' + fs.readFileSync(sourcePath('./runtime/jade_runtime.min.js'));
      }
      if (option.ejs) {
        console.log('enable ejs');
        code_cube += '\n//ejs_runtime\n' + fs.readdirSync(sourcePath('./runtime/ejs_runtime.min.js'));
      }
      if (option.mcss) {
        console.log('enable mcss');
        code_cube += '\n//cube_css.min.js\n' + fs.readdirSync(sourcePath('./runtime/cube_css.min.js'));
      }
      fs.sync().save(filePath('./cube.min.js'), code_cube);
      console.log('inited cube.min.js');
    } else {
      console.log('file already exist: ./cube.min.js');
    }
    if (!checkFile('./index.html')) {
      fs.sync().save(filePath('./index.html'), fs.readFileSync(sourcePath('./runtime/start.html')));
      console.log('inited index.html');
    } else {
      console.log('file already exist: ./index.html');
    }
    if (!checkFile('./.cubeignore')) {
      fs.sync().save(filePath('./.cubeignore'), '/cube.min.js');
      console.log('inited .cubeignore');
    } else {
      console.log('file already exist: ./.cubeignore');
    }
    if (!checkFile('./package.json')) {
      fs.sync().save(filePath('./package.json'), fs.readFileSync(sourcePath('./runtime/package.json')));
      console.log('inited package.json');
    } else {
      console.log('file already exist: ./package.json');
    }
    if (!checkFile('./main.js')) {
      fs.sync().save(filePath('./main.js'),
        'document.getElementById("msg").innerHTML = "hello, Cube";\n' +
        'document.getElementById("show").value = document.getElementById("initscript").innerHTML;\n' +
        'exports.run = function () {console.log("app started!")};'
      );
      console.log('inited main.js');
    } else {
      console.log('file already exist: ./main.js');
    }
    fs.sync().mkdir('test');

    console.log('successfully inited');
  });

cmd.command('install')
  .description('install dependences')
  .action(function () {
    // install node_modules
  });

cmd.command('enable')
  .description('enable functions, usage: enable [ejs|jade|mcss]')
  .action(function() {
    findCube(function(cubeFile) {
      if (!cubeFile) {
        return console.log('cube not found');
      }
      console.log(cubeFile);
    });
  });

cmd.command('build')
  .description('build the hole project, including: less->css->min, script->transfer->min')
  .action(function (source, args) {
    //TODO build hole project
    var base = getBase();
    var sourceDir = path.join(base, source).replace(/\/$/, '');
    var destDir = args[1] ? path.join(base, args[1]) : (sourceDir + '.release');
    Cube.processDir(sourceDir, destDir, true, function (err, info) {
      console.log('==================');
      console.log('files:', info.total, 'cost:', info.time + 's');
      if (err.length) {
        console.log('Error:', err.length);
        err.forEach(function (e) {
          console.log('\t*', e.code, e.message);
        });
      } else {
        console.log('Build successfully');
      }
      console.log('==================');
    });
  });

cmd.command('js')
  .description('output a single js independent file')
  .option('-o, --output [value]', 'output file')
  .option('-b, --base [value]', 'base dir')
  .action(function (file, args) {
    var pwd = getBase();
    var output = args.output;
    var base = args.base;
    if (!base) {
      base = pwd;
    }
    if (!/^\//.test(base)) {
      base = path.join(pwd, base);
    }
    if (!output) {
      output = file.replace(/\.js$/, '.out.js');
    }
    file = path.join(pwd, file);
    output = path.join(pwd, output);
    console.log(base, file);
    var code = Cube.buildJs(file.substr(base.length), base, true, true);
    console.log(output);
    fs.writeFileSync(output, code.min);
  });
cmd.command('help')
  .description('help')
  .action(function () {
    cmd.help();
  });

cmd.parse(process.argv);

if (!cmd.args.length) {
  cmd.help();
}



